import O from"path";import f from"fs";import b from"magic-string";import l from"path";import S from"fs";import h from"sveltedoc-parser";import{logger as k}from"@storybook/node-logger";import{preprocess as w}from"svelte/compiler";import{createFilter as x}from"vite";function C(e){if(!e)return null;let o=e.split(/[/\\]/).map(encodeURI);if(o.length>1){let s=o[o.length-1].match(/^index(\.\w+)/);s&&(o.pop(),o[o.length-1]+=s[1])}let t=o.pop()?.replace(/%/g,"u").replace(/\.[^.]+$/,"").replace(/[^a-zA-Z_$0-9]+/g,"_").replace(/^_/,"").replace(/_$/,"").replace(/^(\d)/,"_$1");if(!t)throw new Error(`Could not derive component name from file ${e}`);return t[0].toUpperCase()+t.slice(1)}function m(e){let o=process.cwd(),{preprocess:t,logDocgen:s=!1}=e,g=x(/\.(svelte)$/);return{name:"storybook:svelte-docgen-plugin",async transform(d,i){if(!g(i))return;let n=l.relative(o,i),c;if(t){let r=S.readFileSync(n).toString(),{code:a}=await w(r,t,{filename:n});c={fileContent:a}}else c={filename:n};let u={...c,version:3},p=new b(d);try{let r=await h.parse(u),a=l.basename(n);r.name=l.basename(a);let y=C(n);p.append(`;${y}.__docgen = ${JSON.stringify(r)}`)}catch(r){s&&k.error(r)}return{code:p.toString(),map:p.generateMap({hires:!0,source:i})}}}}var A=["@storybook/svelte"],E={builder:"@storybook/builder-vite"};function I(){let e=O.resolve("package.json");if(!f.existsSync(e))return!1;let o=f.readFileSync(e,"utf8");return JSON.parse(o)}var Z=async(e,{presets:o})=>{let{plugins:t=[]}=e;return t.push(m(e)),{...e,plugins:t}};export{A as addons,E as core,I as readPackageJson,Z as viteFinal};
